#include "contractmanager.h"\n\nContractManager::ContractManager(ApiClient *apiClient, QObject *parent)\n    : QObject(parent)\n    , m_apiClient(apiClient)\n{\n}\n\nQVariantList ContractManager::contracts() const\n{\n    return m_contracts;\n}\n\nvoid ContractManager::fetchContracts()\n{\n    m_apiClient->get("/api/v1/contracts", [this](QJsonObject response) {\n        if (response.contains("contracts")) {\n            QJsonArray contractsArray = response["contracts"].toArray();\n            m_contracts.clear();\n            \n            for (const QJsonValue &value : contractsArray) {\n                QJsonObject contract = value.toObject();\n                QVariantMap contractMap;\n                contractMap["id"] = contract["id"].toInt();\n                contractMap["id_proprietaire"] = contract["id_proprietaire"].toInt();\n                contractMap["id_locataire"] = contract["id_locataire"].toInt();\n                contractMap["id_propriete"] = contract["id_propriete"].toInt();\n                contractMap["numero_contrat"] = contract["numero_contrat"].toString();\n                contractMap["date_debut"] = contract["date_debut"].toString();\n                contractMap["date_fin"] = contract["date_fin"].toString();\n                contractMap["loyer_mensuel"] = contract["loyer_mensuel"].toDouble();\n                contractMap["depot_garantie"] = contract["depot_garantie"].toDouble();\n                contractMap["statut"] = contract["statut"].toString();\n                m_contracts.append(contractMap);\n            }\n            \n            emit contractsChanged();\n        } else {\n            emit operationFailed("Échec du chargement des contrats");\n        }\n    });\n}\n\nvoid ContractManager::createContract(const QJsonObject &contractData)\n{\n    m_apiClient->post("/api/v1/contracts", contractData, [this](QJsonObject response) {\n        if (response.contains("success") && response["success"].toBool()) {\n            emit contractCreated();\n            fetchContracts();\n        } else {\n            QString error = response["message"].toString("Échec de la création du contrat");\n            emit operationFailed(error);\n        }\n    });\n}\n\nvoid ContractManager::initiateContract(const QJsonObject &contractData)\n{\n    m_apiClient->post("/api/v1/contracts/initiate", contractData, [this](QJsonObject response) {\n        if (response.contains("success") && response["success"].toBool()) {\n            emit contractInitiated(response);\n            fetchContracts();\n        } else {\n            QString error = response["message"].toString("Échec de l'initiation du contrat");\n            emit operationFailed(error);\n        }\n    });\n}\n\nvoid ContractManager::validateContractTenant(int contractId, const QString &validationCode)\n{\n    QJsonObject data;\n    data["code_validation"] = validationCode;\n    \n    QString endpoint = QString("/api/v1/contracts/%1/validate-tenant").arg(contractId);\n    m_apiClient->post(endpoint, data, [this](QJsonObject response) {\n        if (response.contains("success") && response["success"].toBool()) {\n            emit contractValidated();\n            fetchContracts();\n        } else {\n            QString error = response["message"].toString("Échec de la validation du contrat");\n            emit operationFailed(error);\n        }\n    });\n}\n\nvoid ContractManager::getContractValidationStatus(int contractId)\n{\n    QString endpoint = QString("/api/v1/contracts/%1/validation-status").arg(contractId);\n    m_apiClient->get(endpoint, [this](QJsonObject response) {\n        if (response.contains("statut")) {\n            emit validationStatusFetched(response);\n        } else {\n            emit operationFailed("Échec de la récupération du statut");\n        }\n    });\n}